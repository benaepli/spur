type Value = int;

role Head {
    let db: map<string, Value> = {};

    func headWrite(key: string, value: int) {
        db[key] = value;
    }

    func AsyncWrite(key: string, value: int) -> bool {
        headWrite(key, value);
        return true;
    }

    func headRead(p: promise<Value>, key: string) {
        resolve_promise(p, db[key]);
    }

    func AsyncRead(key: string) -> Value {
        let p: promise<Value> = create_promise();
        let f: future<Value> = create_future(p);
        headRead(p, key);
        return await f;
    }
}

ClientInterface {
    func write(node: Head, key: string, value: Value) {
        await rpc_call(node, AsyncWrite(key, value));
    }

    func read(node: Head, key: string) -> Value {
        return await rpc_call(node, AsyncRead(key));
    }
}